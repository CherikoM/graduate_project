<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.project.dao.StyleDAO">
    <resultMap id="styleResultMap" type="com.example.project.dataobject.StyleDO">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="en_name" property="enName"/>
        <result column="other_name" property="otherName"/>
        <result column="type" property="type"/>
        <result column="description" property="description"/>
        <result column="belong" property="belong"/>
        <result column="gmt_created" property="gmtCreated"/>
        <result column="gmt_modified" property="gmtModified"/>
    </resultMap>

    <select id="getAll" resultMap="styleResultMap">
        select * from style
    </select>
    
    <select id="getAllGenre" resultMap="styleResultMap">
        select * from style where type=0
    </select>

    <select id="getAllStyle" resultMap="styleResultMap">
        select * from style where type!=0
    </select>

    <select id="getGenreAndPrimary" resultMap="styleResultMap">
        select * from style where type=0 or type=1
    </select>

    <select id="getStyleByEnName" resultMap="styleResultMap">
        select * from style where `en_name`=#{enName}
    </select>

    <select id="getStyleById" resultMap="styleResultMap">
        select * from style where `id`=#{id}
    </select>

    <select id="getStyleBranch" resultMap="styleResultMap">
        <if test="enName!=null">
            select `id`, `name`, `en_name`, `type` from `style` where JSON_CONTAINS(belong,JSON_Array(#{enName}))
        </if>
    </select>

    <update id="updateStyle" parameterType="com.example.project.dataobject.StyleDO">
        <if test="id!=null">
            update `style`
            <set>
                <if test="name!=null">
                    `name`=#{name},
                </if>
                <if test="enName!=null">
                    `en_name`=#{enName},
                </if>
                <if test="otherName!=null">
                    `other_name`=#{otherName},
                </if>
                <if test="type!=null">
                    <if test="type==0 or type==1 or type==2">
                        type=#{type},
                    </if>
                </if>
                <if test="description!=null">
                    description=#{description},
                </if>
                <if test="belong!=null">
                    belong=#{belong},
                </if>
            </set>
            <where>
                id = #{id};
            </where>
        </if>
    </update>

    <insert id="addStyle" parameterType="com.example.project.dataobject.StyleDO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `style`(`name`,`en_name`,`other_name`,`type`,`description`,`belong`)
        VALUES (#{name},#{enName},#{otherName},#{type},#{description},#{belong});
    </insert>

<!--    &lt;!&ndash;insertOne方法:插入一行数据-->
<!--            insert:表示插入语句-->
<!--                id:和DAO接口中的方法名对应-->
<!--                parameterType:传入参数的类型-->
<!--                useGeneratedKeys:传入参数返赋值主键-->
<!--                keyProperty:表中的主键字段&ndash;&gt;-->
<!--    <insert id="insertOne" parameterType="com.example.project.dataobject.ArtistDO" useGeneratedKeys="true" keyProperty="id">-->
<!--        INSERT INTO artist (name, profile, type, real_name, nickname, belong, official, photo)-->
<!--        VALUES(#{name}, #{profile}, #{type}, #{realName}, #{nickname}, #{belong}, #{official}, #{photo})-->
<!--    </insert>-->

<!--    &lt;!&ndash;insertAll方法:插入多条数据&ndash;&gt;-->
<!--    <insert id="insertAll" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">-->
<!--        INSERT INTO artist (name, profile, type, real_name, nickname, belong, official, photo)-->
<!--        VALUES-->
<!--        &lt;!&ndash;foreach:遍历传入的集合-->
<!--                collection:传入的参数名，对应DAO中的@Param("list")-->
<!--                item:给遍历中每一个数据的变量命名，比如此处可以用it.name获得具体的名字值-->
<!--                index:集合的索引值，从0开始-->
<!--                separator:遍历每条记录时添加的分隔符-->
<!--                foreach会自动优化逗号,，确保sql语句是正确的&ndash;&gt;-->
<!--        <foreach collection="list" item="it" index="index" separator =",">-->
<!--            (#{it.name}, #{it.profile}, #{it.type}, #{it.realName}, #{it.nickname}, #{it.belong}, #{it.official}, #{it.photo})-->
<!--        </foreach >-->
<!--    </insert>-->

<!--    &lt;!&ndash;update方法:更新一行数据-->
<!--        update:表示更新语句&ndash;&gt;-->
<!--    <update id="update" parameterType="com.example.project.dataobject.ArtistDO">-->
<!--        update artist-->
<!--        &lt;!&ndash;set:表示set语句，避免全空值导致的插入错误，同时它能自动管理逗号,&ndash;&gt;-->
<!--        <set>-->
<!--            &lt;!&ndash;根据传入的DO对象的某一项是否非空，决定是否更新该字段&ndash;&gt;-->
<!--            <if test="name != null">-->
<!--                name=#{name},-->
<!--            </if>-->
<!--            <if test="profile != null">-->
<!--                profile=#{profile},-->
<!--            </if>-->
<!--            <if test="type != null">-->
<!--                type=#{type},-->
<!--            </if>-->
<!--            <if test="realName != null">-->
<!--                real_name=#{realName},-->
<!--            </if>-->
<!--            <if test="nickname != null">-->
<!--                nickname=#{nickname},-->
<!--            </if>-->
<!--            <if test="belong != null">-->
<!--                belong=#{belong},-->
<!--            </if>-->
<!--            <if test="official != null">-->
<!--                official=#{official},-->
<!--            </if>-->
<!--            <if test="photo != null">-->
<!--                photo=#{photo},-->
<!--            </if>-->
<!--            &lt;!&ndash;任何情况下，修改操作一定更新gmt_modified时间，避免所有列值都为null时引起SQL语法错误&ndash;&gt;-->
<!--            gmt_modified=now()-->
<!--        </set>-->
<!--        where id=#{id}-->
<!--    </update>-->

<!--    &lt;!&ndash;delete方法:根据id删除一行数据-->
<!--            delete:表示删除语句-->
<!--                没有配置parameterType属性是因为delete方法的参数由@Param注解组成-->
<!--                默认情况下，Mybatis会把这类数据当Map数组来传递-->
<!--                而Mybatis默认的parameterType类型就是Map，所以可以省略不写&ndash;&gt;-->
<!--    <delete id="delete">-->
<!--        delete from artist where id=#{id}-->
<!--    </delete>-->

<!--    &lt;!&ndash;findAll方法:查询所有数据-->
<!--            select:表示查询语句-->
<!--                使用resultMap，就不需要做额外的数据映射&ndash;&gt;-->
<!--    <select id="findAll" resultMap="artistResultMap">-->
<!--        select * from artist-->
<!--    </select>-->

<!--    &lt;!&ndash;findByName方法:根据name字段查询数据&ndash;&gt;-->
<!--    <select id="findByName" resultMap="artistResultMap">-->
<!--        select * from artist where name=#{name} limit 1-->
<!--    </select>-->

<!--    &lt;!&ndash;search方法:根据关键词模糊查询数据，没有关键词就是查询全部&ndash;&gt;-->
<!--    <select id="search" resultMap="artistResultMap">-->
<!--        select * from artist-->
<!--        &lt;!&ndash;where:表示where语句，和set标签类似的作用&ndash;&gt;-->
<!--        <where>-->
<!--            <if test="keyword != null">-->
<!--                name like CONCAT('%', #{keyword}, '%')-->
<!--                or profile like CONCAT('%', #{keyword}, '%')-->
<!--            </if>-->
<!--        </where>-->
<!--    </select>-->

<!--    &lt;!&ndash;findByIds:根据多个id进行in查询&ndash;&gt;-->
<!--    <select id="findByIds" resultMap="artistResultMap">-->
<!--        select * from artist-->
<!--        <where>-->
<!--            id in-->
<!--            &lt;!&ndash;open:标识节点开始的分隔符-->
<!--                close:标识节点结束的分隔符&ndash;&gt;-->
<!--            <foreach item="item" index="index" collection="ids"-->
<!--                     open="(" separator="," close=")">-->
<!--                #{item}-->
<!--            </foreach>-->
<!--        </where>-->
<!--    </select>-->
</mapper>