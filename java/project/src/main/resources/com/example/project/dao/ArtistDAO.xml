<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.project.dao.ArtistDAO">
    <!--resultMap:处理表和DO对象的属性映射，确保表中的每个字段都有属性可以匹配-->
    <!--id:映射的唯一标识，一般命名为xxxResultMap-->
    <!--type:对应的DO类完整路径-->
    <resultMap id="artistResultMap" type="com.example.project.dataobject.ArtistDO">
        <!--id:设置数据库主键字段信息-->
        <!--column:表的字段名称-->
        <!--property:对应的DO属性名称-->
        <id column="id" property="id"/>
        <!--result:设置数据库其他字段信息-->
        <result column="name" property="name"/>
        <result column="profile" property="profile"/>
        <result column="type" property="type"/>
        <result column="real_name" property="realName"/>
        <result column="nickname" property="nickname"/>
        <result column="belong" property="belong"/>
        <result column="official" property="official"/>
        <result column="picture" property="picture"/>
        <result column="gmt_created" property="gmtCreated"/>
        <result column="gmt_modified" property="gmtModified"/>
    </resultMap>

    <!--search方法:根据关键词模糊查询数据，没有关键词就是查询全部-->
    <select id="search" resultMap="artistResultMap">
        select *
        <if test="keyword != null">
            ,match(`profile`) against (#{keyword} in boolean mode) as res1
            ,match(`nickname`) against (#{keyword} in boolean mode) * 2 as res2
            ,match(`real_name`) against (#{keyword} in boolean mode) * 3 as res3
            ,match(`name`) against (#{keyword} in boolean mode) * 4 as res4
        </if>
        from artist
        <!--where:表示where语句，和set标签类似的作用-->
        <if test="keyword != null">
            <where>
                match(`name`, `real_name`, `nickname`, `profile`) against (#{keyword} in boolean mode)
                or lower(JSON_EXTRACT(`artist`.belong,'$[*].name')) like CONCAT('%',lower(#{keyword}),'%')
            </where>
        </if>

        <if test="keyword != null">
            order by
            res4 desc,
            res3 desc,
            res2 desc,
            res1 desc
        </if>
    </select>

    <select id="getArtistById" resultMap="artistResultMap">
        <if test="id != null">
            select * from `artist` where id = #{id}
        </if>
    </select>

    <select id="getArtistsByIds" resultMap="artistResultMap">
        <if test="ids!=null and ids.size()>0">
            SELECT * FROM `artist` where id in
            <foreach collection="ids" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
    </select>

    <update id="updateArtist" parameterType="com.example.project.dataobject.ArtistDO">
        <if test="id!=null">
            update `artist`
            <set>
                <if test="name!=null">
                    name=#{name},
                </if>
                <if test="profile!=null">
                    profile=#{profile},
                </if>
                <if test="type!=null">
                    <if test="type==0 or type==1">
                        type=#{type},
                    </if>
                </if>
                <if test="realName!=null">
                    real_name=#{realName},
                </if>
                <if test="nickname!=null">
                    nickname=#{nickname},
                </if>
                <if test="belong!=null">
                    belong=#{belong},
                </if>
                <if test="official!=null">
                    official=#{official},
                </if>
                <if test="picture!=null">
                    picture=#{picture},
                </if>
            </set>
            <where>
                id = #{id};
            </where>
        </if>
    </update>

    <insert id="addArtist" parameterType="com.example.project.dataobject.ArtistDO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `artist`(`name`,`profile`,`type`,`real_name`,`nickname`,`belong`,`official`,`picture`)
        VALUES (#{name},#{profile},#{type},#{realName},#{nickname},#{belong},#{official},#{picture});
    </insert>
</mapper>